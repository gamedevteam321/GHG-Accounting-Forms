(function(){
    let currentRowIds = { 'fuel-based': 1, 'distance-based': 1, 'average-data': 1 };
    let isInitialized = false;
    const scopeRoot = (typeof root_element !== 'undefined' && root_element) ? root_element : document;
    let selectedCompany = null;
    let selectedUnit = null;

    function init(){ if(isInitialized) return; setupTabs(); createEntryRow('fuel-based'); createEntryRow('distance-based'); createEntryRow('average-data'); attachGlobalKeyBlockers(); isInitialized = true; }

    function setupTabs(){ const c = scopeRoot.querySelector('.employee-commuting-container'); if(!c) return; const btns = c.querySelectorAll('.tab-btn'); const tabs = { 'fuel-based': c.querySelector('#fuel-based-tab'), 'distance-based': c.querySelector('#distance-based-tab'), 'average-data': c.querySelector('#average-data-tab') }; btns.forEach(b=>b.addEventListener('click',()=>{ btns.forEach(x=>x.classList.remove('active')); b.classList.add('active'); Object.values(tabs).forEach(el=>el.classList.remove('active')); const id=b.dataset.tab; if(tabs[id]) tabs[id].classList.add('active'); })); }

    function attachGlobalKeyBlockers(){ const c = scopeRoot.querySelector('.employee-commuting-container'); if(!c) return; const h=(e)=>{ if(!c.contains(e.target)) return; e.stopPropagation(); if((e.ctrlKey||e.metaKey)||e.key==='/'||e.key==='?'){ e.preventDefault(); } }; ['keydown','keypress','keyup'].forEach(ev=>document.addEventListener(ev,h,true)); }

    function bodyId(tab){ return { 'fuel-based':'fuelBasedECTableBody', 'distance-based':'distanceBasedECTableBody', 'average-data':'averageDataECTableBody' }[tab]; }

    function createEntryRow(tab){ const tbody = scopeRoot.querySelector('#'+bodyId(tab)); if(!tbody) return; const exist = tbody.querySelector('.data-entry-row'); if(exist) exist.remove(); const row = document.createElement('tr'); row.className='data-entry-row'; const today = new Date().toISOString().split('T')[0]; if(tab==='fuel-based'){ row.innerHTML = `<td>${currentRowIds[tab]}</td><td><input type="date" class="form-control isolated-input" data-frappe-ignore="true" value="${today}"></td><td><input type="text" class="form-control emp isolated-input" data-frappe-ignore="true" placeholder="e.g., Sales Team"></td><td><input type="text" class="form-control mode isolated-input" data-frappe-ignore="true" placeholder="e.g., Personal Car"></td><td><input type="text" class="form-control fuel-type isolated-input" data-frappe-ignore="true" placeholder="Gasoline"></td><td><input type="number" class="form-control fuel-consumed isolated-input" data-frappe-ignore="true" step="0.01" placeholder="0.00"></td><td><input type="text" class="form-control unit isolated-input" data-frappe-ignore="true" value="litres"></td><td><input type="number" class="form-control ef isolated-input" data-frappe-ignore="true" step="0.0001" placeholder="0.0000"></td><td><input type="text" class="form-control ef-unit isolated-input" data-frappe-ignore="true" value="kg CO2e/litre"></td><td><span class="total-emissions">0.00</span></td><td><button class="btn btn-success save-btn">Add</button></td>`; } else if(tab==='distance-based'){ row.innerHTML = `<td>${currentRowIds[tab]}</td><td><input type="date" class="form-control isolated-input" data-frappe-ignore="true" value="${today}"></td><td><input type="text" class="form-control mode isolated-input" data-frappe-ignore="true" placeholder="e.g., Personal Car"></td><td><input type="number" class="form-control annual-distance isolated-input" data-frappe-ignore="true" step="0.01" placeholder="0.00"></td><td><input type="text" class="form-control unit isolated-input" data-frappe-ignore="true" value="passenger-km"></td><td><input type="number" class="form-control veh-ef isolated-input" data-frappe-ignore="true" step="0.0001" placeholder="0.0000"></td><td><input type="text" class="form-control ef-unit isolated-input" data-frappe-ignore="true" value="kg CO2e/p-km"></td><td><span class="total-emissions">0.00</span></td><td><button class="btn btn-success save-btn">Add</button></td>`; } else { row.innerHTML = `<td>${currentRowIds[tab]}</td><td><input type="date" class="form-control isolated-input" data-frappe-ignore="true" value="${today}"></td><td><input type="text" class="form-control mode isolated-input" data-frappe-ignore="true" placeholder="e.g., Personal Car"></td><td><input type="number" class="form-control num-emp isolated-input" data-frappe-ignore="true" step="1" placeholder="0"></td><td><input type="number" class="form-control pct-mode isolated-input" data-frappe-ignore="true" step="0.01" placeholder="0"></td><td><input type="number" class="form-control avg-distance isolated-input" data-frappe-ignore="true" step="0.01" placeholder="0.00"></td><td><input type="number" class="form-control work-days isolated-input" data-frappe-ignore="true" step="1" placeholder="0"></td><td><input type="number" class="form-control ef isolated-input" data-frappe-ignore="true" step="0.0001" placeholder="0.0000"></td><td><span class="total-emissions">0.00</span></td><td><button class="btn btn-success save-btn">Add</button></td>`; }
        tbody.appendChild(row); isolateInputs(row); setupRowEvents(row, tab); }

    function setupRowEvents(row, tab){ const calc=()=>{ let total=0; if(tab==='fuel-based'){ const q=parseFloat(val(row,'.fuel-consumed'))||0; const ef=parseFloat(val(row,'.ef'))||0; total=q*ef; } else if(tab==='distance-based'){ const d=parseFloat(val(row,'.annual-distance'))||0; const ef=parseFloat(val(row,'.veh-ef'))||0; total=d*ef; } else { const n=parseFloat(val(row,'.num-emp'))||0; const p=(parseFloat(val(row,'.pct-mode'))||0)/100; const dist=parseFloat(val(row,'.avg-distance'))||0; const days=parseFloat(val(row,'.work-days'))||0; const ef=parseFloat(val(row,'.ef'))||0; total=n*p*dist*days*ef; } row.querySelector('.total-emissions').textContent=(isFinite(total)?total:0).toFixed(2); }; row.querySelectorAll('input,select').forEach(el=>{ el.addEventListener('input',calc); el.addEventListener('change',calc); ['keydown','keypress','keyup'].forEach(ev=>el.addEventListener(ev,(e)=>{ e.stopPropagation(); },true)); }); const save=row.querySelector('.save-btn'); if(save){ save.addEventListener('click',(e)=>{ e.preventDefault(); addDisplayRow(row,tab); }); } }

    function addDisplayRow(entryRow, tab){ const tbody=entryRow.parentElement; const display=document.createElement('tr'); display.className='data-display-row'; const dateVal=entryRow.querySelector('input[type="date"]').value; let html=`<td>${currentRowIds[tab]}</td><td>${formatDate(dateVal)}</td>`; if(tab==='fuel-based'){ html+=`<td>${val(entryRow,'.emp')}</td><td>${val(entryRow,'.mode')}</td><td>${val(entryRow,'.fuel-type')}</td><td>${val(entryRow,'.fuel-consumed')}</td><td>${val(entryRow,'.unit','litres')}</td><td>${val(entryRow,'.ef')}</td><td>${val(entryRow,'.ef-unit')}</td><td>${entryRow.querySelector('.total-emissions').textContent}</td>`; } else if(tab==='distance-based'){ html+=`<td>${val(entryRow,'.mode')}</td><td>${val(entryRow,'.annual-distance')}</td><td>${val(entryRow,'.unit','passenger-km')}</td><td>${val(entryRow,'.veh-ef')}</td><td>${val(entryRow,'.ef-unit')}</td><td>${entryRow.querySelector('.total-emissions').textContent}</td>`; } else { html+=`<td>${val(entryRow,'.mode')}</td><td>${val(entryRow,'.num-emp')}</td><td>${val(entryRow,'.pct-mode')}</td><td>${val(entryRow,'.avg-distance')}</td><td>${val(entryRow,'.work-days')}</td><td>${val(entryRow,'.ef')}</td><td>${entryRow.querySelector('.total-emissions').textContent}</td>`; } html+=`<td><button class="btn btn-danger delete-btn">Delete</button></td>`; display.innerHTML=html; tbody.insertBefore(display, entryRow.nextSibling); bumpIndex(entryRow,tab); display.querySelector('.delete-btn').addEventListener('click',()=>display.remove()); clearEntryRow(entryRow); }

    function val(scope, sel, def='-'){ const el=scope.querySelector(sel); if(!el) return def; if(el.tagName==='INPUT') return el.type==='number'? (parseFloat(el.value)||0).toString(): (el.value||def); return el.value||def; }
    function bumpIndex(entryRow,tab){ currentRowIds[tab]++; entryRow.querySelector('td:first-child').textContent=currentRowIds[tab]; }
    function isolateInputs(scope){ scope.querySelectorAll('input,select,textarea').forEach(inp=>{ inp.setAttribute('data-frappe-ignore','true'); inp.classList.add('isolated-input'); }); }
    function clearEntryRow(row){ row.querySelectorAll('input').forEach(i=>{ if(i.type==='date'){ i.value=new Date().toISOString().split('T')[0]; } else { i.value=''; } }); row.querySelector('.total-emissions').textContent='0.00'; }
    function formatDate(d){ if(!d) return '-'; return new Date(d).toLocaleDateString(); }

    // Filter bar
    async function getUserContext(){ try { const r = await frappe.call({ method:'climoro_onboarding.climoro_onboarding.api.get_current_user_company_units' }); return r.message || { company:null, units:[], is_super:false }; } catch(e){ return { company:null, units:[], is_super:false }; } }
    function buildFilterBar(done){ const container = scopeRoot.querySelector('.employee-commuting-container'); if(!container){ done&&done(); return; } if(container.querySelector('.filter-bar')){ done&&done(); return; } const bar=document.createElement('div'); bar.className='filter-bar'; (async()=>{ try{ const ctx=await getUserContext(); const roles=(frappe&&frappe.get_roles)? frappe.get_roles():[]; const canShow = ctx.is_super || roles.includes('System Manager') || roles.includes('Super Admin'); if(!canShow){ done&&done(); return; } }catch(e){ done&&done(); return; } })(); bar.innerHTML = `<div style=\"display:flex; gap:12px; align-items:center; flex-wrap:nowrap; margin:8px 0;\"><div class=\"company-filter\" style=\"min-width:220px; display:flex; align-items:center; gap:8px;\"><label style=\"font-size:12px; margin:0; white-space:nowrap;\">Company</label><select class=\"form-control filter-company-select\" style=\"width:260px;\"></select></div><div class=\"unit-filter\" style=\"min-width:220px; display:flex; align-items:center; gap:8px;\"><label style=\"font-size:12px; margin:0; white-space:nowrap;\">Unit</label><select class=\"form-control filter-unit-select\" style=\"width:260px;\"></select></div><div><button type=\"button\" class=\"btn btn-secondary filter-apply-btn\">Apply</button></div></div>`; const header = container.querySelector('.page-header')||container.querySelector('.header-section'); if(header) header.insertAdjacentElement('afterend', bar); else container.prepend(bar); bar.querySelector('.filter-apply-btn')?.addEventListener('click', ()=>{ const csel=bar.querySelector('.filter-company-select'); const usel=bar.querySelector('.filter-unit-select'); selectedCompany=csel.value||null; selectedUnit=usel.value||null; container.querySelectorAll('.data-display-row').forEach(r=>r.remove()); }); done&&done(); }
    async function fetchCompanies(){ const r = await frappe.call({ method:'frappe.client.get_list', args:{ doctype:'Company', fields:['name'], limit:500 } }); return (r.message||[]).map(x=>x.name); }
    async function fetchUnits(company){ const filters=company?{ company }:{}; const r=await frappe.call({ method:'frappe.client.get_list', args:{ doctype:'Units', fields:['name'], filters, limit:500 } }); return (r.message||[]).map(x=>x.name); }
    async function initializeFiltersFromContext(){ const ctx=await getUserContext(); const bar=scopeRoot.querySelector('.filter-bar'); if(!bar) return; const cSel=bar.querySelector('.filter-company-select'); const uSel=bar.querySelector('.filter-unit-select'); cSel.innerHTML=''; uSel.innerHTML=''; if(ctx.is_super){ const companies=await fetchCompanies(); cSel.innerHTML = `<option value=\"\">All Companies</option>` + companies.map(c=>`<option value=\"${c}\">${c}</option>`).join(''); cSel.addEventListener('change', async ()=>{ selectedCompany=cSel.value||null; const units=await fetchUnits(selectedCompany); uSel.innerHTML = `<option value=\"\">All Units</option>` + units.map(u=>`<option value=\"${u}\">${u}</option>`).join(''); selectedUnit=null; }); const initialUnits=await fetchUnits(null); uSel.innerHTML = `<option value=\"\">All Units</option>` + initialUnits.map(u=>`<option value=\"${u}\">${u}</option>`).join(''); selectedCompany=null; selectedUnit=null; } else { selectedCompany = ctx.company || null; cSel.innerHTML = `<option value=\"${selectedCompany||''}\">${selectedCompany||'-'}</option>`; cSel.disabled=true; let units=[]; if(ctx.units && ctx.units.length) units=ctx.units; else if(selectedCompany) units=await fetchUnits(selectedCompany); if(!units||!units.length){ uSel.innerHTML = `<option value=\"\">All Units</option>`; selectedUnit=null; } else { uSel.innerHTML = units.map(u=>`<option value=\"${u}\">${u}</option>`).join(''); selectedUnit = units.length===1 ? units[0] : units[0]; } uSel.disabled = !(ctx.units && ctx.units.length>1); } }

    function init(){ if(isInitialized) return; buildFilterBar(async ()=>{ await initializeFiltersFromContext(); setupTabs(); createEntryRow('fuel-based'); createEntryRow('distance-based'); createEntryRow('average-data'); attachGlobalKeyBlockers(); isInitialized = true; }); }

    if(document.readyState==='loading'){ document.addEventListener('DOMContentLoaded', init); } else { init(); }
})();


